//this source code was auto-generated by tolua#, do not modify it
using System;
using System.Runtime.InteropServices;
using LuaInterface;

public class System_StringWrap
{
	public static void Register(LuaState L)
	{
		IntPtr lazyWrapFunc = Marshal.GetFunctionPointerForDelegate((LuaCSFunction)LazyWrap);
		IntPtr lazyVarWrapFunc = Marshal.GetFunctionPointerForDelegate((LuaCSFunction)LazyVarWrap);
		L.BeginClass(typeof(System.String), typeof(System.Object));
		L.RegLazyFunction("Equals", lazyWrapFunc);
		L.RegLazyFunction("Clone", lazyWrapFunc);
		L.RegLazyFunction("GetTypeCode", lazyWrapFunc);
		L.RegLazyFunction("CopyTo", lazyWrapFunc);
		L.RegLazyFunction("ToCharArray", lazyWrapFunc);
		L.RegLazyFunction("Split", lazyWrapFunc);
		L.RegLazyFunction("Substring", lazyWrapFunc);
		L.RegLazyFunction("Trim", lazyWrapFunc);
		L.RegLazyFunction("TrimStart", lazyWrapFunc);
		L.RegLazyFunction("TrimEnd", lazyWrapFunc);
		L.RegLazyFunction("Compare", lazyWrapFunc);
		L.RegLazyFunction("CompareTo", lazyWrapFunc);
		L.RegLazyFunction("CompareOrdinal", lazyWrapFunc);
		L.RegLazyFunction("EndsWith", lazyWrapFunc);
		L.RegLazyFunction("IndexOfAny", lazyWrapFunc);
		L.RegLazyFunction("IndexOf", lazyWrapFunc);
		L.RegLazyFunction("LastIndexOf", lazyWrapFunc);
		L.RegLazyFunction("LastIndexOfAny", lazyWrapFunc);
		L.RegLazyFunction("Contains", lazyWrapFunc);
		L.RegLazyFunction("IsNullOrEmpty", lazyWrapFunc);
		L.RegLazyFunction("Normalize", lazyWrapFunc);
		L.RegLazyFunction("IsNormalized", lazyWrapFunc);
		L.RegLazyFunction("Remove", lazyWrapFunc);
		L.RegLazyFunction("PadLeft", lazyWrapFunc);
		L.RegLazyFunction("PadRight", lazyWrapFunc);
		L.RegLazyFunction("StartsWith", lazyWrapFunc);
		L.RegLazyFunction("Replace", lazyWrapFunc);
		L.RegLazyFunction("ToLower", lazyWrapFunc);
		L.RegLazyFunction("ToLowerInvariant", lazyWrapFunc);
		L.RegLazyFunction("ToUpper", lazyWrapFunc);
		L.RegLazyFunction("ToUpperInvariant", lazyWrapFunc);
		L.RegLazyFunction("ToString", lazyWrapFunc);
		L.RegLazyFunction("Format", lazyWrapFunc);
		L.RegLazyFunction("Copy", lazyWrapFunc);
		L.RegLazyFunction("Concat", lazyWrapFunc);
		L.RegLazyFunction("Insert", lazyWrapFunc);
		L.RegLazyFunction("Intern", lazyWrapFunc);
		L.RegLazyFunction("IsInterned", lazyWrapFunc);
		L.RegLazyFunction("Join", lazyWrapFunc);
		L.RegLazyFunction("GetEnumerator", lazyWrapFunc);
		L.RegLazyFunction("GetHashCode", lazyWrapFunc);
		L.RegLazyFunction("New", lazyWrapFunc);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegLazyVar("Empty", true, false, lazyVarWrapFunc);
		L.RegLazyVar("Length", true, false, lazyVarWrapFunc);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSystem_String(IntPtr L)
	{
        try
        {
            LuaTypes luatype = LuaDLL.lua_type(L, 1);

            if (luatype == LuaTypes.LUA_TSTRING)
            {
                string arg0 = LuaDLL.lua_tostring(L, 1);
                ToLua.PushSealed(L, arg0);
                return 1;
            }
            else
            {
                return LuaDLL.luaL_throw(L, "invalid arguments to string's ctor method");
            }            
        }
        catch(Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Equals(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
				string arg0 = ToLua.ToString(L, 2);
				bool o = obj != null ? obj.Equals(arg0) : arg0 == null;
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<object>(L, 2))
			{
				System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
				object arg0 = ToLua.ToVarObject(L, 2);
				bool o = obj != null ? obj.Equals(arg0) : arg0 == null;
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
				string arg0 = ToLua.CheckString(L, 2);
				System.StringComparison arg1 = (System.StringComparison)ToLua.CheckObject(L, 3, typeof(System.StringComparison));
				bool o = obj.Equals(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.String.Equals");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clone(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
			object o = obj.Clone();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTypeCode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
			System.TypeCode o = obj.GetTypeCode();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CopyTo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			char[] arg1 = ToLua.CheckCharBuffer(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			int arg3 = (int)LuaDLL.luaL_checknumber(L, 5);
			obj.CopyTo(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToCharArray(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
				char[] o = obj.ToCharArray();
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				char[] o = obj.ToCharArray(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.String.ToCharArray");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Split(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<string, char[], System.StringSplitOptions>(L, 1))
			{
				System.String obj = (System.String)ToLua.ToObject(L, 1);
				char[] arg0 = ToLua.CheckCharBuffer(L, 2);
				System.StringSplitOptions arg1 = (System.StringSplitOptions)ToLua.ToObject(L, 3);
				string[] o = obj.Split(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, char[], int>(L, 1))
			{
				System.String obj = (System.String)ToLua.ToObject(L, 1);
				char[] arg0 = ToLua.CheckCharBuffer(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				string[] o = obj.Split(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, string[], System.StringSplitOptions>(L, 1))
			{
				System.String obj = (System.String)ToLua.ToObject(L, 1);
				string[] arg0 = ToLua.ToStringArray(L, 2);
				System.StringSplitOptions arg1 = (System.StringSplitOptions)ToLua.ToObject(L, 3);
				string[] o = obj.Split(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<string, string[], int, System.StringSplitOptions>(L, 1))
			{
				System.String obj = (System.String)ToLua.ToObject(L, 1);
				string[] arg0 = ToLua.ToStringArray(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				System.StringSplitOptions arg2 = (System.StringSplitOptions)ToLua.ToObject(L, 4);
				string[] o = obj.Split(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<string, char[], int, System.StringSplitOptions>(L, 1))
			{
				System.String obj = (System.String)ToLua.ToObject(L, 1);
				char[] arg0 = ToLua.CheckCharBuffer(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				System.StringSplitOptions arg2 = (System.StringSplitOptions)ToLua.ToObject(L, 4);
				string[] o = obj.Split(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<string>(L, 1) && TypeChecker.CheckParamsType<char>(L, 2, count - 1))
			{
				System.String obj = (System.String)ToLua.ToObject(L, 1);
				char[] arg0 = ToLua.ToParamsChar(L, 2, count - 1);
				string[] o = obj.Split(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.String.Split");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Substring(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				string o = obj.Substring(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				string o = obj.Substring(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.String.Substring");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Trim(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<string>(L, 1))
			{
				System.String obj = (System.String)ToLua.ToObject(L, 1);
				string o = obj.Trim();
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<string>(L, 1) && TypeChecker.CheckParamsType<char>(L, 2, count - 1))
			{
				System.String obj = (System.String)ToLua.ToObject(L, 1);
				char[] arg0 = ToLua.ToParamsChar(L, 2, count - 1);
				string o = obj.Trim(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.String.Trim");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TrimStart(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
			char[] arg0 = ToLua.CheckParamsChar(L, 2, count - 1);
			string o = obj.TrimStart(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TrimEnd(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
			char[] arg0 = ToLua.CheckParamsChar(L, 2, count - 1);
			string o = obj.TrimEnd(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Compare(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				int o = System.String.Compare(arg0, arg1);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.StringComparison>(L, 3))
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				System.StringComparison arg2 = (System.StringComparison)ToLua.ToObject(L, 3);
				int o = System.String.Compare(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<bool>(L, 3))
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				bool arg2 = LuaDLL.lua_toboolean(L, 3);
				int o = System.String.Compare(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<System.Globalization.CultureInfo, System.Globalization.CompareOptions>(L, 3))
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				System.Globalization.CultureInfo arg2 = (System.Globalization.CultureInfo)ToLua.ToObject(L, 3);
				System.Globalization.CompareOptions arg3 = (System.Globalization.CompareOptions)ToLua.ToObject(L, 4);
				int o = System.String.Compare(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<bool, System.Globalization.CultureInfo>(L, 3))
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				bool arg2 = LuaDLL.lua_toboolean(L, 3);
				System.Globalization.CultureInfo arg3 = (System.Globalization.CultureInfo)ToLua.ToObject(L, 4);
				int o = System.String.Compare(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 5)
			{
				string arg0 = ToLua.CheckString(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				string arg2 = ToLua.CheckString(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
				int o = System.String.Compare(arg0, arg1, arg2, arg3, arg4);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 6 && TypeChecker.CheckTypes<System.StringComparison>(L, 6))
			{
				string arg0 = ToLua.CheckString(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				string arg2 = ToLua.CheckString(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
				System.StringComparison arg5 = (System.StringComparison)ToLua.ToObject(L, 6);
				int o = System.String.Compare(arg0, arg1, arg2, arg3, arg4, arg5);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 6 && TypeChecker.CheckTypes<bool>(L, 6))
			{
				string arg0 = ToLua.CheckString(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				string arg2 = ToLua.CheckString(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
				bool arg5 = LuaDLL.lua_toboolean(L, 6);
				int o = System.String.Compare(arg0, arg1, arg2, arg3, arg4, arg5);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 7 && TypeChecker.CheckTypes<System.Globalization.CultureInfo, System.Globalization.CompareOptions>(L, 6))
			{
				string arg0 = ToLua.CheckString(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				string arg2 = ToLua.CheckString(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
				System.Globalization.CultureInfo arg5 = (System.Globalization.CultureInfo)ToLua.ToObject(L, 6);
				System.Globalization.CompareOptions arg6 = (System.Globalization.CompareOptions)ToLua.ToObject(L, 7);
				int o = System.String.Compare(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 7 && TypeChecker.CheckTypes<bool, System.Globalization.CultureInfo>(L, 6))
			{
				string arg0 = ToLua.CheckString(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				string arg2 = ToLua.CheckString(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
				bool arg5 = LuaDLL.lua_toboolean(L, 6);
				System.Globalization.CultureInfo arg6 = (System.Globalization.CultureInfo)ToLua.ToObject(L, 7);
				int o = System.String.Compare(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.String.Compare");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CompareTo(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
				string arg0 = ToLua.ToString(L, 2);
				int o = obj.CompareTo(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<object>(L, 2))
			{
				System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
				object arg0 = ToLua.ToVarObject(L, 2);
				int o = obj.CompareTo(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.String.CompareTo");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CompareOrdinal(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				int o = System.String.CompareOrdinal(arg0, arg1);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 5)
			{
				string arg0 = ToLua.CheckString(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				string arg2 = ToLua.CheckString(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
				int o = System.String.CompareOrdinal(arg0, arg1, arg2, arg3, arg4);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.String.CompareOrdinal");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EndsWith(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
				string arg0 = ToLua.CheckString(L, 2);
				bool o = obj.EndsWith(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
				string arg0 = ToLua.CheckString(L, 2);
				System.StringComparison arg1 = (System.StringComparison)ToLua.CheckObject(L, 3, typeof(System.StringComparison));
				bool o = obj.EndsWith(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 4)
			{
				System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
				string arg0 = ToLua.CheckString(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				System.Globalization.CultureInfo arg2 = (System.Globalization.CultureInfo)ToLua.CheckObject<System.Globalization.CultureInfo>(L, 4);
				bool o = obj.EndsWith(arg0, arg1, arg2);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.String.EndsWith");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IndexOfAny(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
				char[] arg0 = ToLua.CheckCharBuffer(L, 2);
				int o = obj.IndexOfAny(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
				char[] arg0 = ToLua.CheckCharBuffer(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				int o = obj.IndexOfAny(arg0, arg1);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 4)
			{
				System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
				char[] arg0 = ToLua.CheckCharBuffer(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				int o = obj.IndexOfAny(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.String.IndexOfAny");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IndexOf(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<char>(L, 2))
			{
				System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
				char arg0 = (char)LuaDLL.lua_tonumber(L, 2);
				int o = obj.IndexOf(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
				string arg0 = ToLua.ToString(L, 2);
				int o = obj.IndexOf(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, int>(L, 2))
			{
				System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
				string arg0 = ToLua.ToString(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				int o = obj.IndexOf(arg0, arg1);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<char, int>(L, 2))
			{
				System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
				char arg0 = (char)LuaDLL.lua_tonumber(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				int o = obj.IndexOf(arg0, arg1);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, System.StringComparison>(L, 2))
			{
				System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
				string arg0 = ToLua.ToString(L, 2);
				System.StringComparison arg1 = (System.StringComparison)ToLua.ToObject(L, 3);
				int o = obj.IndexOf(arg0, arg1);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<string, int, int>(L, 2))
			{
				System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
				string arg0 = ToLua.ToString(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
				int o = obj.IndexOf(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<string, int, System.StringComparison>(L, 2))
			{
				System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
				string arg0 = ToLua.ToString(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				System.StringComparison arg2 = (System.StringComparison)ToLua.ToObject(L, 4);
				int o = obj.IndexOf(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<char, int, int>(L, 2))
			{
				System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
				char arg0 = (char)LuaDLL.lua_tonumber(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
				int o = obj.IndexOf(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 5)
			{
				System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
				string arg0 = ToLua.CheckString(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				System.StringComparison arg3 = (System.StringComparison)ToLua.CheckObject(L, 5, typeof(System.StringComparison));
				int o = obj.IndexOf(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.String.IndexOf");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LastIndexOf(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<char>(L, 2))
			{
				System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
				char arg0 = (char)LuaDLL.lua_tonumber(L, 2);
				int o = obj.LastIndexOf(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
				string arg0 = ToLua.ToString(L, 2);
				int o = obj.LastIndexOf(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, int>(L, 2))
			{
				System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
				string arg0 = ToLua.ToString(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				int o = obj.LastIndexOf(arg0, arg1);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<char, int>(L, 2))
			{
				System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
				char arg0 = (char)LuaDLL.lua_tonumber(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				int o = obj.LastIndexOf(arg0, arg1);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, System.StringComparison>(L, 2))
			{
				System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
				string arg0 = ToLua.ToString(L, 2);
				System.StringComparison arg1 = (System.StringComparison)ToLua.ToObject(L, 3);
				int o = obj.LastIndexOf(arg0, arg1);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<string, int, int>(L, 2))
			{
				System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
				string arg0 = ToLua.ToString(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
				int o = obj.LastIndexOf(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<string, int, System.StringComparison>(L, 2))
			{
				System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
				string arg0 = ToLua.ToString(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				System.StringComparison arg2 = (System.StringComparison)ToLua.ToObject(L, 4);
				int o = obj.LastIndexOf(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<char, int, int>(L, 2))
			{
				System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
				char arg0 = (char)LuaDLL.lua_tonumber(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
				int o = obj.LastIndexOf(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 5)
			{
				System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
				string arg0 = ToLua.CheckString(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				System.StringComparison arg3 = (System.StringComparison)ToLua.CheckObject(L, 5, typeof(System.StringComparison));
				int o = obj.LastIndexOf(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.String.LastIndexOf");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LastIndexOfAny(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
				char[] arg0 = ToLua.CheckCharBuffer(L, 2);
				int o = obj.LastIndexOfAny(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
				char[] arg0 = ToLua.CheckCharBuffer(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				int o = obj.LastIndexOfAny(arg0, arg1);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 4)
			{
				System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
				char[] arg0 = ToLua.CheckCharBuffer(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				int o = obj.LastIndexOfAny(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.String.LastIndexOfAny");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Contains(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.Contains(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsNullOrEmpty(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			bool o = System.String.IsNullOrEmpty(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Normalize(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
				string o = obj.Normalize();
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 2)
			{
				System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
				System.Text.NormalizationForm arg0 = (System.Text.NormalizationForm)ToLua.CheckObject(L, 2, typeof(System.Text.NormalizationForm));
				string o = obj.Normalize(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.String.Normalize");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsNormalized(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
				bool o = obj.IsNormalized();
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 2)
			{
				System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
				System.Text.NormalizationForm arg0 = (System.Text.NormalizationForm)ToLua.CheckObject(L, 2, typeof(System.Text.NormalizationForm));
				bool o = obj.IsNormalized(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.String.IsNormalized");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Remove(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				string o = obj.Remove(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				string o = obj.Remove(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.String.Remove");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PadLeft(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				string o = obj.PadLeft(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				char arg1 = (char)LuaDLL.luaL_checknumber(L, 3);
				string o = obj.PadLeft(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.String.PadLeft");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PadRight(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				string o = obj.PadRight(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				char arg1 = (char)LuaDLL.luaL_checknumber(L, 3);
				string o = obj.PadRight(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.String.PadRight");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StartsWith(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
				string arg0 = ToLua.CheckString(L, 2);
				bool o = obj.StartsWith(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
				string arg0 = ToLua.CheckString(L, 2);
				System.StringComparison arg1 = (System.StringComparison)ToLua.CheckObject(L, 3, typeof(System.StringComparison));
				bool o = obj.StartsWith(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 4)
			{
				System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
				string arg0 = ToLua.CheckString(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				System.Globalization.CultureInfo arg2 = (System.Globalization.CultureInfo)ToLua.CheckObject<System.Globalization.CultureInfo>(L, 4);
				bool o = obj.StartsWith(arg0, arg1, arg2);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.String.StartsWith");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Replace(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<string, string>(L, 2))
			{
				System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
				string arg0 = ToLua.ToString(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				string o = obj.Replace(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<char, char>(L, 2))
			{
				System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
				char arg0 = (char)LuaDLL.lua_tonumber(L, 2);
				char arg1 = (char)LuaDLL.lua_tonumber(L, 3);
				string o = obj.Replace(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.String.Replace");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToLower(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
				string o = obj.ToLower();
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 2)
			{
				System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
				System.Globalization.CultureInfo arg0 = (System.Globalization.CultureInfo)ToLua.CheckObject<System.Globalization.CultureInfo>(L, 2);
				string o = obj.ToLower(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.String.ToLower");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToLowerInvariant(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
			string o = obj.ToLowerInvariant();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToUpper(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
				string o = obj.ToUpper();
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 2)
			{
				System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
				System.Globalization.CultureInfo arg0 = (System.Globalization.CultureInfo)ToLua.CheckObject<System.Globalization.CultureInfo>(L, 2);
				string o = obj.ToUpper(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.String.ToUpper");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToUpperInvariant(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
			string o = obj.ToUpperInvariant();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToString(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
				string o = obj.ToString();
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 2)
			{
				System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
				System.IFormatProvider arg0 = (System.IFormatProvider)ToLua.CheckObject<System.IFormatProvider>(L, 2);
				string o = obj.ToString(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.String.ToString");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Format(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<string, object>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				object arg1 = ToLua.ToVarObject(L, 2);
				string o = System.String.Format(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, object, object>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				object arg1 = ToLua.ToVarObject(L, 2);
				object arg2 = ToLua.ToVarObject(L, 3);
				string o = System.String.Format(arg0, arg1, arg2);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<string, object, object, object>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				object arg1 = ToLua.ToVarObject(L, 2);
				object arg2 = ToLua.ToVarObject(L, 3);
				object arg3 = ToLua.ToVarObject(L, 4);
				string o = System.String.Format(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<System.IFormatProvider, string>(L, 1) && TypeChecker.CheckParamsType<object>(L, 3, count - 2))
			{
				System.IFormatProvider arg0 = (System.IFormatProvider)ToLua.ToObject(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				object[] arg2 = ToLua.ToParamsObject(L, 3, count - 2);
				string o = System.String.Format(arg0, arg1, arg2);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<string>(L, 1) && TypeChecker.CheckParamsType<object>(L, 2, count - 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				object[] arg1 = ToLua.ToParamsObject(L, 2, count - 1);
				string o = System.String.Format(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.String.Format");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Copy(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			string o = System.String.Copy(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Concat(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<object>(L, 1))
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				string o = System.String.Concat(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string, string>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				string o = System.String.Concat(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<object, object>(L, 1))
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				object arg1 = ToLua.ToVarObject(L, 2);
				string o = System.String.Concat(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, string, string>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				string arg2 = ToLua.ToString(L, 3);
				string o = System.String.Concat(arg0, arg1, arg2);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<object, object, object>(L, 1))
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				object arg1 = ToLua.ToVarObject(L, 2);
				object arg2 = ToLua.ToVarObject(L, 3);
				string o = System.String.Concat(arg0, arg1, arg2);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<string, string, string, string>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				string arg2 = ToLua.ToString(L, 3);
				string arg3 = ToLua.ToString(L, 4);
				string o = System.String.Concat(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<object, object, object, object>(L, 1))
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				object arg1 = ToLua.ToVarObject(L, 2);
				object arg2 = ToLua.ToVarObject(L, 3);
				object arg3 = ToLua.ToVarObject(L, 4);
				string o = System.String.Concat(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (TypeChecker.CheckParamsType<string>(L, 1, count))
			{
				string[] arg0 = ToLua.ToParamsString(L, 1, count);
				string o = System.String.Concat(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (TypeChecker.CheckParamsType<object>(L, 1, count))
			{
				object[] arg0 = ToLua.ToParamsObject(L, 1, count);
				string o = System.String.Concat(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.String.Concat");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Insert(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			string o = obj.Insert(arg0, arg1);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Intern(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			string o = System.String.Intern(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsInterned(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			string o = System.String.IsInterned(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Join(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string[] arg1 = ToLua.CheckStringArray(L, 2);
				string o = System.String.Join(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 4)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string[] arg1 = ToLua.CheckStringArray(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				string o = System.String.Join(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.String.Join");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetEnumerator(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
			System.Collections.IEnumerator o = obj.GetEnumerator();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetHashCode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.String obj = (System.String)ToLua.CheckObject(L, 1, typeof(System.String));
			int o = obj.GetHashCode();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.ToString(L, 1);
			string arg1 = ToLua.ToString(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Empty(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, System.String.Empty);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Length(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.String obj = (System.String)o;
			int ret = obj.Length;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Length on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LazyWrap(IntPtr L)
	{
		try
		{
			int stackTop = LuaDLL.lua_gettop(L);
			bool lazy = LuaDLL.luaL_checkboolean(L, stackTop);
			string key = LuaDLL.lua_tostring(L, stackTop - 1);
			LuaDLL.lua_pop(L, 2);

			switch (key)
			{
				case "New":
					if (lazy)
					{
						IntPtr fn = Marshal.GetFunctionPointerForDelegate((LuaCSFunction)_CreateSystem_String);
						LuaDLL.tolua_function(L, "New", fn);
						LuaDLL.lua_pop(L, 1);
					}

					return _CreateSystem_String(L);
				case "Equals":
					if (lazy)
					{
						IntPtr fn = Marshal.GetFunctionPointerForDelegate((LuaCSFunction)Equals);
						LuaDLL.tolua_function(L, "Equals", fn);
						LuaDLL.lua_pop(L, 1);
					}

					return Equals(L);
				case "Clone":
					if (lazy)
					{
						IntPtr fn = Marshal.GetFunctionPointerForDelegate((LuaCSFunction)Clone);
						LuaDLL.tolua_function(L, "Clone", fn);
						LuaDLL.lua_pop(L, 1);
					}

					return Clone(L);
				case "GetTypeCode":
					if (lazy)
					{
						IntPtr fn = Marshal.GetFunctionPointerForDelegate((LuaCSFunction)GetTypeCode);
						LuaDLL.tolua_function(L, "GetTypeCode", fn);
						LuaDLL.lua_pop(L, 1);
					}

					return GetTypeCode(L);
				case "CopyTo":
					if (lazy)
					{
						IntPtr fn = Marshal.GetFunctionPointerForDelegate((LuaCSFunction)CopyTo);
						LuaDLL.tolua_function(L, "CopyTo", fn);
						LuaDLL.lua_pop(L, 1);
					}

					return CopyTo(L);
				case "ToCharArray":
					if (lazy)
					{
						IntPtr fn = Marshal.GetFunctionPointerForDelegate((LuaCSFunction)ToCharArray);
						LuaDLL.tolua_function(L, "ToCharArray", fn);
						LuaDLL.lua_pop(L, 1);
					}

					return ToCharArray(L);
				case "Split":
					if (lazy)
					{
						IntPtr fn = Marshal.GetFunctionPointerForDelegate((LuaCSFunction)Split);
						LuaDLL.tolua_function(L, "Split", fn);
						LuaDLL.lua_pop(L, 1);
					}

					return Split(L);
				case "Substring":
					if (lazy)
					{
						IntPtr fn = Marshal.GetFunctionPointerForDelegate((LuaCSFunction)Substring);
						LuaDLL.tolua_function(L, "Substring", fn);
						LuaDLL.lua_pop(L, 1);
					}

					return Substring(L);
				case "Trim":
					if (lazy)
					{
						IntPtr fn = Marshal.GetFunctionPointerForDelegate((LuaCSFunction)Trim);
						LuaDLL.tolua_function(L, "Trim", fn);
						LuaDLL.lua_pop(L, 1);
					}

					return Trim(L);
				case "TrimStart":
					if (lazy)
					{
						IntPtr fn = Marshal.GetFunctionPointerForDelegate((LuaCSFunction)TrimStart);
						LuaDLL.tolua_function(L, "TrimStart", fn);
						LuaDLL.lua_pop(L, 1);
					}

					return TrimStart(L);
				case "TrimEnd":
					if (lazy)
					{
						IntPtr fn = Marshal.GetFunctionPointerForDelegate((LuaCSFunction)TrimEnd);
						LuaDLL.tolua_function(L, "TrimEnd", fn);
						LuaDLL.lua_pop(L, 1);
					}

					return TrimEnd(L);
				case "Compare":
					if (lazy)
					{
						IntPtr fn = Marshal.GetFunctionPointerForDelegate((LuaCSFunction)Compare);
						LuaDLL.tolua_function(L, "Compare", fn);
						LuaDLL.lua_pop(L, 1);
					}

					return Compare(L);
				case "CompareTo":
					if (lazy)
					{
						IntPtr fn = Marshal.GetFunctionPointerForDelegate((LuaCSFunction)CompareTo);
						LuaDLL.tolua_function(L, "CompareTo", fn);
						LuaDLL.lua_pop(L, 1);
					}

					return CompareTo(L);
				case "CompareOrdinal":
					if (lazy)
					{
						IntPtr fn = Marshal.GetFunctionPointerForDelegate((LuaCSFunction)CompareOrdinal);
						LuaDLL.tolua_function(L, "CompareOrdinal", fn);
						LuaDLL.lua_pop(L, 1);
					}

					return CompareOrdinal(L);
				case "EndsWith":
					if (lazy)
					{
						IntPtr fn = Marshal.GetFunctionPointerForDelegate((LuaCSFunction)EndsWith);
						LuaDLL.tolua_function(L, "EndsWith", fn);
						LuaDLL.lua_pop(L, 1);
					}

					return EndsWith(L);
				case "IndexOfAny":
					if (lazy)
					{
						IntPtr fn = Marshal.GetFunctionPointerForDelegate((LuaCSFunction)IndexOfAny);
						LuaDLL.tolua_function(L, "IndexOfAny", fn);
						LuaDLL.lua_pop(L, 1);
					}

					return IndexOfAny(L);
				case "IndexOf":
					if (lazy)
					{
						IntPtr fn = Marshal.GetFunctionPointerForDelegate((LuaCSFunction)IndexOf);
						LuaDLL.tolua_function(L, "IndexOf", fn);
						LuaDLL.lua_pop(L, 1);
					}

					return IndexOf(L);
				case "LastIndexOf":
					if (lazy)
					{
						IntPtr fn = Marshal.GetFunctionPointerForDelegate((LuaCSFunction)LastIndexOf);
						LuaDLL.tolua_function(L, "LastIndexOf", fn);
						LuaDLL.lua_pop(L, 1);
					}

					return LastIndexOf(L);
				case "LastIndexOfAny":
					if (lazy)
					{
						IntPtr fn = Marshal.GetFunctionPointerForDelegate((LuaCSFunction)LastIndexOfAny);
						LuaDLL.tolua_function(L, "LastIndexOfAny", fn);
						LuaDLL.lua_pop(L, 1);
					}

					return LastIndexOfAny(L);
				case "Contains":
					if (lazy)
					{
						IntPtr fn = Marshal.GetFunctionPointerForDelegate((LuaCSFunction)Contains);
						LuaDLL.tolua_function(L, "Contains", fn);
						LuaDLL.lua_pop(L, 1);
					}

					return Contains(L);
				case "IsNullOrEmpty":
					if (lazy)
					{
						IntPtr fn = Marshal.GetFunctionPointerForDelegate((LuaCSFunction)IsNullOrEmpty);
						LuaDLL.tolua_function(L, "IsNullOrEmpty", fn);
						LuaDLL.lua_pop(L, 1);
					}

					return IsNullOrEmpty(L);
				case "Normalize":
					if (lazy)
					{
						IntPtr fn = Marshal.GetFunctionPointerForDelegate((LuaCSFunction)Normalize);
						LuaDLL.tolua_function(L, "Normalize", fn);
						LuaDLL.lua_pop(L, 1);
					}

					return Normalize(L);
				case "IsNormalized":
					if (lazy)
					{
						IntPtr fn = Marshal.GetFunctionPointerForDelegate((LuaCSFunction)IsNormalized);
						LuaDLL.tolua_function(L, "IsNormalized", fn);
						LuaDLL.lua_pop(L, 1);
					}

					return IsNormalized(L);
				case "Remove":
					if (lazy)
					{
						IntPtr fn = Marshal.GetFunctionPointerForDelegate((LuaCSFunction)Remove);
						LuaDLL.tolua_function(L, "Remove", fn);
						LuaDLL.lua_pop(L, 1);
					}

					return Remove(L);
				case "PadLeft":
					if (lazy)
					{
						IntPtr fn = Marshal.GetFunctionPointerForDelegate((LuaCSFunction)PadLeft);
						LuaDLL.tolua_function(L, "PadLeft", fn);
						LuaDLL.lua_pop(L, 1);
					}

					return PadLeft(L);
				case "PadRight":
					if (lazy)
					{
						IntPtr fn = Marshal.GetFunctionPointerForDelegate((LuaCSFunction)PadRight);
						LuaDLL.tolua_function(L, "PadRight", fn);
						LuaDLL.lua_pop(L, 1);
					}

					return PadRight(L);
				case "StartsWith":
					if (lazy)
					{
						IntPtr fn = Marshal.GetFunctionPointerForDelegate((LuaCSFunction)StartsWith);
						LuaDLL.tolua_function(L, "StartsWith", fn);
						LuaDLL.lua_pop(L, 1);
					}

					return StartsWith(L);
				case "Replace":
					if (lazy)
					{
						IntPtr fn = Marshal.GetFunctionPointerForDelegate((LuaCSFunction)Replace);
						LuaDLL.tolua_function(L, "Replace", fn);
						LuaDLL.lua_pop(L, 1);
					}

					return Replace(L);
				case "ToLower":
					if (lazy)
					{
						IntPtr fn = Marshal.GetFunctionPointerForDelegate((LuaCSFunction)ToLower);
						LuaDLL.tolua_function(L, "ToLower", fn);
						LuaDLL.lua_pop(L, 1);
					}

					return ToLower(L);
				case "ToLowerInvariant":
					if (lazy)
					{
						IntPtr fn = Marshal.GetFunctionPointerForDelegate((LuaCSFunction)ToLowerInvariant);
						LuaDLL.tolua_function(L, "ToLowerInvariant", fn);
						LuaDLL.lua_pop(L, 1);
					}

					return ToLowerInvariant(L);
				case "ToUpper":
					if (lazy)
					{
						IntPtr fn = Marshal.GetFunctionPointerForDelegate((LuaCSFunction)ToUpper);
						LuaDLL.tolua_function(L, "ToUpper", fn);
						LuaDLL.lua_pop(L, 1);
					}

					return ToUpper(L);
				case "ToUpperInvariant":
					if (lazy)
					{
						IntPtr fn = Marshal.GetFunctionPointerForDelegate((LuaCSFunction)ToUpperInvariant);
						LuaDLL.tolua_function(L, "ToUpperInvariant", fn);
						LuaDLL.lua_pop(L, 1);
					}

					return ToUpperInvariant(L);
				case "ToString":
					if (lazy)
					{
						IntPtr fn = Marshal.GetFunctionPointerForDelegate((LuaCSFunction)ToString);
						LuaDLL.tolua_function(L, "ToString", fn);
						LuaDLL.lua_pop(L, 1);
					}

					return ToString(L);
				case "Format":
					if (lazy)
					{
						IntPtr fn = Marshal.GetFunctionPointerForDelegate((LuaCSFunction)Format);
						LuaDLL.tolua_function(L, "Format", fn);
						LuaDLL.lua_pop(L, 1);
					}

					return Format(L);
				case "Copy":
					if (lazy)
					{
						IntPtr fn = Marshal.GetFunctionPointerForDelegate((LuaCSFunction)Copy);
						LuaDLL.tolua_function(L, "Copy", fn);
						LuaDLL.lua_pop(L, 1);
					}

					return Copy(L);
				case "Concat":
					if (lazy)
					{
						IntPtr fn = Marshal.GetFunctionPointerForDelegate((LuaCSFunction)Concat);
						LuaDLL.tolua_function(L, "Concat", fn);
						LuaDLL.lua_pop(L, 1);
					}

					return Concat(L);
				case "Insert":
					if (lazy)
					{
						IntPtr fn = Marshal.GetFunctionPointerForDelegate((LuaCSFunction)Insert);
						LuaDLL.tolua_function(L, "Insert", fn);
						LuaDLL.lua_pop(L, 1);
					}

					return Insert(L);
				case "Intern":
					if (lazy)
					{
						IntPtr fn = Marshal.GetFunctionPointerForDelegate((LuaCSFunction)Intern);
						LuaDLL.tolua_function(L, "Intern", fn);
						LuaDLL.lua_pop(L, 1);
					}

					return Intern(L);
				case "IsInterned":
					if (lazy)
					{
						IntPtr fn = Marshal.GetFunctionPointerForDelegate((LuaCSFunction)IsInterned);
						LuaDLL.tolua_function(L, "IsInterned", fn);
						LuaDLL.lua_pop(L, 1);
					}

					return IsInterned(L);
				case "Join":
					if (lazy)
					{
						IntPtr fn = Marshal.GetFunctionPointerForDelegate((LuaCSFunction)Join);
						LuaDLL.tolua_function(L, "Join", fn);
						LuaDLL.lua_pop(L, 1);
					}

					return Join(L);
				case "GetEnumerator":
					if (lazy)
					{
						IntPtr fn = Marshal.GetFunctionPointerForDelegate((LuaCSFunction)GetEnumerator);
						LuaDLL.tolua_function(L, "GetEnumerator", fn);
						LuaDLL.lua_pop(L, 1);
					}

					return GetEnumerator(L);
				case "GetHashCode":
					if (lazy)
					{
						IntPtr fn = Marshal.GetFunctionPointerForDelegate((LuaCSFunction)GetHashCode);
						LuaDLL.tolua_function(L, "GetHashCode", fn);
						LuaDLL.lua_pop(L, 1);
					}

					return GetHashCode(L);
				case "op_Equality":
					if (lazy)
					{
						IntPtr fn = Marshal.GetFunctionPointerForDelegate((LuaCSFunction)op_Equality);
						LuaDLL.tolua_function(L, "op_Equality", fn);
						LuaDLL.lua_pop(L, 1);
					}

					return op_Equality(L);
			}
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LazyVarWrap(IntPtr L)
	{
		try
		{
			int stackTop = LuaDLL.lua_gettop(L);
			bool getStatus = LuaDLL.luaL_checkboolean(L, stackTop);
			bool lazy = LuaDLL.luaL_checkboolean(L, stackTop - 1);
			string key = LuaDLL.lua_tostring(L, stackTop - 2);
			LuaDLL.lua_pop(L, 3);

			switch (key)
			{
				case "Empty":
					if (lazy)
					{
						if (getStatus)
						{
							IntPtr fn = Marshal.GetFunctionPointerForDelegate((LuaCSFunction)get_Empty);
							LuaDLL.tolua_variable(L, "Empty", fn, IntPtr.Zero);
						}

						LuaDLL.lua_pop(L, 1);
					}

					if (getStatus)
					{
						return get_Empty(L);
					}

					break;
				case "Length":
					if (lazy)
					{
						if (getStatus)
						{
							IntPtr fn = Marshal.GetFunctionPointerForDelegate((LuaCSFunction)get_Length);
							LuaDLL.tolua_variable(L, "Length", fn, IntPtr.Zero);
						}

						LuaDLL.lua_pop(L, 1);
					}

					if (getStatus)
					{
						return get_Length(L);
					}

					break;
			}
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

